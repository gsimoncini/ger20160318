//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace mz.erp.commontypes.data {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class FuenteDeCambioExDataset : DataSet {
        
        private FuenteDeCambioDataTable tableFuenteDeCambio;
        
        public FuenteDeCambioExDataset() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected FuenteDeCambioExDataset(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["FuenteDeCambio"] != null)) {
                    this.Tables.Add(new FuenteDeCambioDataTable(ds.Tables["FuenteDeCambio"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FuenteDeCambioDataTable FuenteDeCambio {
            get {
                return this.tableFuenteDeCambio;
            }
        }
        
        public override DataSet Clone() {
            FuenteDeCambioExDataset cln = ((FuenteDeCambioExDataset)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["FuenteDeCambio"] != null)) {
                this.Tables.Add(new FuenteDeCambioDataTable(ds.Tables["FuenteDeCambio"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableFuenteDeCambio = ((FuenteDeCambioDataTable)(this.Tables["FuenteDeCambio"]));
            if ((this.tableFuenteDeCambio != null)) {
                this.tableFuenteDeCambio.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "FuenteDeCambioExDataset";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/FuenteDeCambioEx.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableFuenteDeCambio = new FuenteDeCambioDataTable();
            this.Tables.Add(this.tableFuenteDeCambio);
        }
        
        private bool ShouldSerializeFuenteDeCambio() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void FuenteDeCambioRowChangeEventHandler(object sender, FuenteDeCambioRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FuenteDeCambioDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnIdFuenteDeCamibo;
            
            private DataColumn columnIdMoneda;
            
            private DataColumn columnVigenciaDesde;
            
            private DataColumn columnViganciaHasta;
            
            private DataColumn columnCotizacionExterna;
            
            private DataColumn columnIdEmpresa;
            
            internal FuenteDeCambioDataTable() : 
                    base("FuenteDeCambio") {
                this.InitClass();
            }
            
            internal FuenteDeCambioDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IdFuenteDeCamiboColumn {
                get {
                    return this.columnIdFuenteDeCamibo;
                }
            }
            
            internal DataColumn IdMonedaColumn {
                get {
                    return this.columnIdMoneda;
                }
            }
            
            internal DataColumn VigenciaDesdeColumn {
                get {
                    return this.columnVigenciaDesde;
                }
            }
            
            internal DataColumn ViganciaHastaColumn {
                get {
                    return this.columnViganciaHasta;
                }
            }
            
            internal DataColumn CotizacionExternaColumn {
                get {
                    return this.columnCotizacionExterna;
                }
            }
            
            internal DataColumn IdEmpresaColumn {
                get {
                    return this.columnIdEmpresa;
                }
            }
            
            public FuenteDeCambioRow this[int index] {
                get {
                    return ((FuenteDeCambioRow)(this.Rows[index]));
                }
            }
            
            public event FuenteDeCambioRowChangeEventHandler FuenteDeCambioRowChanged;
            
            public event FuenteDeCambioRowChangeEventHandler FuenteDeCambioRowChanging;
            
            public event FuenteDeCambioRowChangeEventHandler FuenteDeCambioRowDeleted;
            
            public event FuenteDeCambioRowChangeEventHandler FuenteDeCambioRowDeleting;
            
            public void AddFuenteDeCambioRow(FuenteDeCambioRow row) {
                this.Rows.Add(row);
            }
            
            public FuenteDeCambioRow AddFuenteDeCambioRow(long IdFuenteDeCamibo, long IdMoneda, System.DateTime VigenciaDesde, System.DateTime ViganciaHasta, System.Decimal CotizacionExterna, long IdEmpresa) {
                FuenteDeCambioRow rowFuenteDeCambioRow = ((FuenteDeCambioRow)(this.NewRow()));
                rowFuenteDeCambioRow.ItemArray = new object[] {
                        IdFuenteDeCamibo,
                        IdMoneda,
                        VigenciaDesde,
                        ViganciaHasta,
                        CotizacionExterna,
                        IdEmpresa};
                this.Rows.Add(rowFuenteDeCambioRow);
                return rowFuenteDeCambioRow;
            }
            
            public FuenteDeCambioRow FindByIdMoneda(long IdMoneda) {
                return ((FuenteDeCambioRow)(this.Rows.Find(new object[] {
                            IdMoneda})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                FuenteDeCambioDataTable cln = ((FuenteDeCambioDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new FuenteDeCambioDataTable();
            }
            
            internal void InitVars() {
                this.columnIdFuenteDeCamibo = this.Columns["IdFuenteDeCamibo"];
                this.columnIdMoneda = this.Columns["IdMoneda"];
                this.columnVigenciaDesde = this.Columns["VigenciaDesde"];
                this.columnViganciaHasta = this.Columns["ViganciaHasta"];
                this.columnCotizacionExterna = this.Columns["CotizacionExterna"];
                this.columnIdEmpresa = this.Columns["IdEmpresa"];
            }
            
            private void InitClass() {
                this.columnIdFuenteDeCamibo = new DataColumn("IdFuenteDeCamibo", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIdFuenteDeCamibo);
                this.columnIdMoneda = new DataColumn("IdMoneda", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIdMoneda);
                this.columnVigenciaDesde = new DataColumn("VigenciaDesde", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVigenciaDesde);
                this.columnViganciaHasta = new DataColumn("ViganciaHasta", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnViganciaHasta);
                this.columnCotizacionExterna = new DataColumn("CotizacionExterna", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCotizacionExterna);
                this.columnIdEmpresa = new DataColumn("IdEmpresa", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIdEmpresa);
                this.Constraints.Add(new UniqueConstraint("FuenteDeCambioExKey1", new DataColumn[] {
                                this.columnIdMoneda}, true));
                this.columnIdFuenteDeCamibo.AllowDBNull = false;
                this.columnIdMoneda.AllowDBNull = false;
                this.columnIdMoneda.Unique = true;
            }
            
            public FuenteDeCambioRow NewFuenteDeCambioRow() {
                return ((FuenteDeCambioRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new FuenteDeCambioRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(FuenteDeCambioRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FuenteDeCambioRowChanged != null)) {
                    this.FuenteDeCambioRowChanged(this, new FuenteDeCambioRowChangeEvent(((FuenteDeCambioRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FuenteDeCambioRowChanging != null)) {
                    this.FuenteDeCambioRowChanging(this, new FuenteDeCambioRowChangeEvent(((FuenteDeCambioRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FuenteDeCambioRowDeleted != null)) {
                    this.FuenteDeCambioRowDeleted(this, new FuenteDeCambioRowChangeEvent(((FuenteDeCambioRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FuenteDeCambioRowDeleting != null)) {
                    this.FuenteDeCambioRowDeleting(this, new FuenteDeCambioRowChangeEvent(((FuenteDeCambioRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveFuenteDeCambioRow(FuenteDeCambioRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FuenteDeCambioRow : DataRow {
            
            private FuenteDeCambioDataTable tableFuenteDeCambio;
            
            internal FuenteDeCambioRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableFuenteDeCambio = ((FuenteDeCambioDataTable)(this.Table));
            }
            
            public long IdFuenteDeCamibo {
                get {
                    return ((long)(this[this.tableFuenteDeCambio.IdFuenteDeCamiboColumn]));
                }
                set {
                    this[this.tableFuenteDeCambio.IdFuenteDeCamiboColumn] = value;
                }
            }
            
            public long IdMoneda {
                get {
                    return ((long)(this[this.tableFuenteDeCambio.IdMonedaColumn]));
                }
                set {
                    this[this.tableFuenteDeCambio.IdMonedaColumn] = value;
                }
            }
            
            public System.DateTime VigenciaDesde {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableFuenteDeCambio.VigenciaDesdeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableFuenteDeCambio.VigenciaDesdeColumn] = value;
                }
            }
            
            public System.DateTime ViganciaHasta {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableFuenteDeCambio.ViganciaHastaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableFuenteDeCambio.ViganciaHastaColumn] = value;
                }
            }
            
            public System.Decimal CotizacionExterna {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableFuenteDeCambio.CotizacionExternaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableFuenteDeCambio.CotizacionExternaColumn] = value;
                }
            }
            
            public long IdEmpresa {
                get {
                    try {
                        return ((long)(this[this.tableFuenteDeCambio.IdEmpresaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableFuenteDeCambio.IdEmpresaColumn] = value;
                }
            }
            
            public bool IsVigenciaDesdeNull() {
                return this.IsNull(this.tableFuenteDeCambio.VigenciaDesdeColumn);
            }
            
            public void SetVigenciaDesdeNull() {
                this[this.tableFuenteDeCambio.VigenciaDesdeColumn] = System.Convert.DBNull;
            }
            
            public bool IsViganciaHastaNull() {
                return this.IsNull(this.tableFuenteDeCambio.ViganciaHastaColumn);
            }
            
            public void SetViganciaHastaNull() {
                this[this.tableFuenteDeCambio.ViganciaHastaColumn] = System.Convert.DBNull;
            }
            
            public bool IsCotizacionExternaNull() {
                return this.IsNull(this.tableFuenteDeCambio.CotizacionExternaColumn);
            }
            
            public void SetCotizacionExternaNull() {
                this[this.tableFuenteDeCambio.CotizacionExternaColumn] = System.Convert.DBNull;
            }
            
            public bool IsIdEmpresaNull() {
                return this.IsNull(this.tableFuenteDeCambio.IdEmpresaColumn);
            }
            
            public void SetIdEmpresaNull() {
                this[this.tableFuenteDeCambio.IdEmpresaColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FuenteDeCambioRowChangeEvent : EventArgs {
            
            private FuenteDeCambioRow eventRow;
            
            private DataRowAction eventAction;
            
            public FuenteDeCambioRowChangeEvent(FuenteDeCambioRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public FuenteDeCambioRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
