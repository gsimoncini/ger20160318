//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace mz.erp.commontypes.data {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class UsuariosDataset : DataSet {
        
        private UsuariosDataTable tableUsuarios;
        
        public UsuariosDataset() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected UsuariosDataset(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Usuarios"] != null)) {
                    this.Tables.Add(new UsuariosDataTable(ds.Tables["Usuarios"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UsuariosDataTable Usuarios {
            get {
                return this.tableUsuarios;
            }
        }
        
        public override DataSet Clone() {
            UsuariosDataset cln = ((UsuariosDataset)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Usuarios"] != null)) {
                this.Tables.Add(new UsuariosDataTable(ds.Tables["Usuarios"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableUsuarios = ((UsuariosDataTable)(this.Tables["Usuarios"]));
            if ((this.tableUsuarios != null)) {
                this.tableUsuarios.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "UsuariosDataset";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/UsuariosDataset.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableUsuarios = new UsuariosDataTable();
            this.Tables.Add(this.tableUsuarios);
        }
        
        private bool ShouldSerializeUsuarios() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void UsuariosRowChangeEventHandler(object sender, UsuariosRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UsuariosDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnIdUsuario;
            
            private DataColumn columnNombre;
            
            private DataColumn columnClave;
            
            private DataColumn columnCantidadConexionesFallida;
            
            private DataColumn columnUltimaConexion;
            
            private DataColumn columnExpiracion;
            
            private DataColumn columnDiasValidezClave;
            
            private DataColumn columnVencimientoClave;
            
            private DataColumn columnBloqueado;
            
            private DataColumn columnIntentosPermitidosConexion;
            
            private DataColumn columnHabilitacionCuenta;
            
            private DataColumn columnAdministrador;
            
            private DataColumn columnClaveNuncaCaduca;
            
            private DataColumn columnPermiteCambioClave;
            
            private DataColumn columnResponsableUltimaModificacion;
            
            private DataColumn columnPerfilUtilizado;
            
            private DataColumn columnActivo;
            
            private DataColumn columnFechaCreacion;
            
            private DataColumn columnIdConexionCreacion;
            
            private DataColumn columnUltimaModificacion;
            
            private DataColumn columnIdConexionUltimaModificacion;
            
            private DataColumn columnRowId;
            
            internal UsuariosDataTable() : 
                    base("Usuarios") {
                this.InitClass();
            }
            
            internal UsuariosDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IdUsuarioColumn {
                get {
                    return this.columnIdUsuario;
                }
            }
            
            internal DataColumn NombreColumn {
                get {
                    return this.columnNombre;
                }
            }
            
            internal DataColumn ClaveColumn {
                get {
                    return this.columnClave;
                }
            }
            
            internal DataColumn CantidadConexionesFallidaColumn {
                get {
                    return this.columnCantidadConexionesFallida;
                }
            }
            
            internal DataColumn UltimaConexionColumn {
                get {
                    return this.columnUltimaConexion;
                }
            }
            
            internal DataColumn ExpiracionColumn {
                get {
                    return this.columnExpiracion;
                }
            }
            
            internal DataColumn DiasValidezClaveColumn {
                get {
                    return this.columnDiasValidezClave;
                }
            }
            
            internal DataColumn VencimientoClaveColumn {
                get {
                    return this.columnVencimientoClave;
                }
            }
            
            internal DataColumn BloqueadoColumn {
                get {
                    return this.columnBloqueado;
                }
            }
            
            internal DataColumn IntentosPermitidosConexionColumn {
                get {
                    return this.columnIntentosPermitidosConexion;
                }
            }
            
            internal DataColumn HabilitacionCuentaColumn {
                get {
                    return this.columnHabilitacionCuenta;
                }
            }
            
            internal DataColumn AdministradorColumn {
                get {
                    return this.columnAdministrador;
                }
            }
            
            internal DataColumn ClaveNuncaCaducaColumn {
                get {
                    return this.columnClaveNuncaCaduca;
                }
            }
            
            internal DataColumn PermiteCambioClaveColumn {
                get {
                    return this.columnPermiteCambioClave;
                }
            }
            
            internal DataColumn ResponsableUltimaModificacionColumn {
                get {
                    return this.columnResponsableUltimaModificacion;
                }
            }
            
            internal DataColumn PerfilUtilizadoColumn {
                get {
                    return this.columnPerfilUtilizado;
                }
            }
            
            internal DataColumn ActivoColumn {
                get {
                    return this.columnActivo;
                }
            }
            
            internal DataColumn FechaCreacionColumn {
                get {
                    return this.columnFechaCreacion;
                }
            }
            
            internal DataColumn IdConexionCreacionColumn {
                get {
                    return this.columnIdConexionCreacion;
                }
            }
            
            internal DataColumn UltimaModificacionColumn {
                get {
                    return this.columnUltimaModificacion;
                }
            }
            
            internal DataColumn IdConexionUltimaModificacionColumn {
                get {
                    return this.columnIdConexionUltimaModificacion;
                }
            }
            
            internal DataColumn RowIdColumn {
                get {
                    return this.columnRowId;
                }
            }
            
            public UsuariosRow this[int index] {
                get {
                    return ((UsuariosRow)(this.Rows[index]));
                }
            }
            
            public event UsuariosRowChangeEventHandler UsuariosRowChanged;
            
            public event UsuariosRowChangeEventHandler UsuariosRowChanging;
            
            public event UsuariosRowChangeEventHandler UsuariosRowDeleted;
            
            public event UsuariosRowChangeEventHandler UsuariosRowDeleting;
            
            public void AddUsuariosRow(UsuariosRow row) {
                this.Rows.Add(row);
            }
            
            public UsuariosRow AddUsuariosRow(
                        long IdUsuario, 
                        string Nombre, 
                        string Clave, 
                        System.Byte CantidadConexionesFallida, 
                        System.DateTime UltimaConexion, 
                        System.DateTime Expiracion, 
                        short DiasValidezClave, 
                        System.DateTime VencimientoClave, 
                        bool Bloqueado, 
                        System.Byte IntentosPermitidosConexion, 
                        System.DateTime HabilitacionCuenta, 
                        bool Administrador, 
                        bool ClaveNuncaCaduca, 
                        bool PermiteCambioClave, 
                        long ResponsableUltimaModificacion, 
                        long PerfilUtilizado, 
                        bool Activo, 
                        System.DateTime FechaCreacion, 
                        long IdConexionCreacion, 
                        System.Byte[] UltimaModificacion, 
                        long IdConexionUltimaModificacion, 
                        System.Guid RowId) {
                UsuariosRow rowUsuariosRow = ((UsuariosRow)(this.NewRow()));
                rowUsuariosRow.ItemArray = new object[] {
                        IdUsuario,
                        Nombre,
                        Clave,
                        CantidadConexionesFallida,
                        UltimaConexion,
                        Expiracion,
                        DiasValidezClave,
                        VencimientoClave,
                        Bloqueado,
                        IntentosPermitidosConexion,
                        HabilitacionCuenta,
                        Administrador,
                        ClaveNuncaCaduca,
                        PermiteCambioClave,
                        ResponsableUltimaModificacion,
                        PerfilUtilizado,
                        Activo,
                        FechaCreacion,
                        IdConexionCreacion,
                        UltimaModificacion,
                        IdConexionUltimaModificacion,
                        RowId};
                this.Rows.Add(rowUsuariosRow);
                return rowUsuariosRow;
            }
            
            public UsuariosRow FindByIdUsuario(long IdUsuario) {
                return ((UsuariosRow)(this.Rows.Find(new object[] {
                            IdUsuario})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                UsuariosDataTable cln = ((UsuariosDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new UsuariosDataTable();
            }
            
            internal void InitVars() {
                this.columnIdUsuario = this.Columns["IdUsuario"];
                this.columnNombre = this.Columns["Nombre"];
                this.columnClave = this.Columns["Clave"];
                this.columnCantidadConexionesFallida = this.Columns["CantidadConexionesFallida"];
                this.columnUltimaConexion = this.Columns["UltimaConexion"];
                this.columnExpiracion = this.Columns["Expiracion"];
                this.columnDiasValidezClave = this.Columns["DiasValidezClave"];
                this.columnVencimientoClave = this.Columns["VencimientoClave"];
                this.columnBloqueado = this.Columns["Bloqueado"];
                this.columnIntentosPermitidosConexion = this.Columns["IntentosPermitidosConexion"];
                this.columnHabilitacionCuenta = this.Columns["HabilitacionCuenta"];
                this.columnAdministrador = this.Columns["Administrador"];
                this.columnClaveNuncaCaduca = this.Columns["ClaveNuncaCaduca"];
                this.columnPermiteCambioClave = this.Columns["PermiteCambioClave"];
                this.columnResponsableUltimaModificacion = this.Columns["ResponsableUltimaModificacion"];
                this.columnPerfilUtilizado = this.Columns["PerfilUtilizado"];
                this.columnActivo = this.Columns["Activo"];
                this.columnFechaCreacion = this.Columns["FechaCreacion"];
                this.columnIdConexionCreacion = this.Columns["IdConexionCreacion"];
                this.columnUltimaModificacion = this.Columns["UltimaModificacion"];
                this.columnIdConexionUltimaModificacion = this.Columns["IdConexionUltimaModificacion"];
                this.columnRowId = this.Columns["RowId"];
            }
            
            private void InitClass() {
                this.columnIdUsuario = new DataColumn("IdUsuario", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIdUsuario);
                this.columnNombre = new DataColumn("Nombre", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNombre);
                this.columnClave = new DataColumn("Clave", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClave);
                this.columnCantidadConexionesFallida = new DataColumn("CantidadConexionesFallida", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCantidadConexionesFallida);
                this.columnUltimaConexion = new DataColumn("UltimaConexion", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUltimaConexion);
                this.columnExpiracion = new DataColumn("Expiracion", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExpiracion);
                this.columnDiasValidezClave = new DataColumn("DiasValidezClave", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDiasValidezClave);
                this.columnVencimientoClave = new DataColumn("VencimientoClave", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVencimientoClave);
                this.columnBloqueado = new DataColumn("Bloqueado", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBloqueado);
                this.columnIntentosPermitidosConexion = new DataColumn("IntentosPermitidosConexion", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIntentosPermitidosConexion);
                this.columnHabilitacionCuenta = new DataColumn("HabilitacionCuenta", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHabilitacionCuenta);
                this.columnAdministrador = new DataColumn("Administrador", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAdministrador);
                this.columnClaveNuncaCaduca = new DataColumn("ClaveNuncaCaduca", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClaveNuncaCaduca);
                this.columnPermiteCambioClave = new DataColumn("PermiteCambioClave", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPermiteCambioClave);
                this.columnResponsableUltimaModificacion = new DataColumn("ResponsableUltimaModificacion", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnResponsableUltimaModificacion);
                this.columnPerfilUtilizado = new DataColumn("PerfilUtilizado", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPerfilUtilizado);
                this.columnActivo = new DataColumn("Activo", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnActivo);
                this.columnFechaCreacion = new DataColumn("FechaCreacion", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFechaCreacion);
                this.columnIdConexionCreacion = new DataColumn("IdConexionCreacion", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIdConexionCreacion);
                this.columnUltimaModificacion = new DataColumn("UltimaModificacion", typeof(System.Byte[]), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUltimaModificacion);
                this.columnIdConexionUltimaModificacion = new DataColumn("IdConexionUltimaModificacion", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIdConexionUltimaModificacion);
                this.columnRowId = new DataColumn("RowId", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowId);
                this.Constraints.Add(new UniqueConstraint("UsuariosDatasetKey1", new DataColumn[] {
                                this.columnIdUsuario}, true));
                this.columnIdUsuario.AllowDBNull = false;
                this.columnIdUsuario.Unique = true;
                this.columnNombre.AllowDBNull = false;
                this.columnClave.AllowDBNull = false;
                this.columnCantidadConexionesFallida.AllowDBNull = false;
                this.columnVencimientoClave.AllowDBNull = false;
                this.columnIntentosPermitidosConexion.AllowDBNull = false;
                this.columnFechaCreacion.AllowDBNull = false;
                this.columnIdConexionCreacion.AllowDBNull = false;
                this.columnUltimaModificacion.ReadOnly = true;
            }
            
            public UsuariosRow NewUsuariosRow() {
                return ((UsuariosRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new UsuariosRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(UsuariosRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UsuariosRowChanged != null)) {
                    this.UsuariosRowChanged(this, new UsuariosRowChangeEvent(((UsuariosRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UsuariosRowChanging != null)) {
                    this.UsuariosRowChanging(this, new UsuariosRowChangeEvent(((UsuariosRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UsuariosRowDeleted != null)) {
                    this.UsuariosRowDeleted(this, new UsuariosRowChangeEvent(((UsuariosRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UsuariosRowDeleting != null)) {
                    this.UsuariosRowDeleting(this, new UsuariosRowChangeEvent(((UsuariosRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveUsuariosRow(UsuariosRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UsuariosRow : DataRow {
            
            private UsuariosDataTable tableUsuarios;
            
            internal UsuariosRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableUsuarios = ((UsuariosDataTable)(this.Table));
            }
            
            public long IdUsuario {
                get {
                    return ((long)(this[this.tableUsuarios.IdUsuarioColumn]));
                }
                set {
                    this[this.tableUsuarios.IdUsuarioColumn] = value;
                }
            }
            
            public string Nombre {
                get {
                    return ((string)(this[this.tableUsuarios.NombreColumn]));
                }
                set {
                    this[this.tableUsuarios.NombreColumn] = value;
                }
            }
            
            public string Clave {
                get {
                    return ((string)(this[this.tableUsuarios.ClaveColumn]));
                }
                set {
                    this[this.tableUsuarios.ClaveColumn] = value;
                }
            }
            
            public System.Byte CantidadConexionesFallida {
                get {
                    return ((System.Byte)(this[this.tableUsuarios.CantidadConexionesFallidaColumn]));
                }
                set {
                    this[this.tableUsuarios.CantidadConexionesFallidaColumn] = value;
                }
            }
            
            public System.DateTime UltimaConexion {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableUsuarios.UltimaConexionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsuarios.UltimaConexionColumn] = value;
                }
            }
            
            public System.DateTime Expiracion {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableUsuarios.ExpiracionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsuarios.ExpiracionColumn] = value;
                }
            }
            
            public short DiasValidezClave {
                get {
                    try {
                        return ((short)(this[this.tableUsuarios.DiasValidezClaveColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsuarios.DiasValidezClaveColumn] = value;
                }
            }
            
            public System.DateTime VencimientoClave {
                get {
                    return ((System.DateTime)(this[this.tableUsuarios.VencimientoClaveColumn]));
                }
                set {
                    this[this.tableUsuarios.VencimientoClaveColumn] = value;
                }
            }
            
            public bool Bloqueado {
                get {
                    try {
                        return ((bool)(this[this.tableUsuarios.BloqueadoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsuarios.BloqueadoColumn] = value;
                }
            }
            
            public System.Byte IntentosPermitidosConexion {
                get {
                    return ((System.Byte)(this[this.tableUsuarios.IntentosPermitidosConexionColumn]));
                }
                set {
                    this[this.tableUsuarios.IntentosPermitidosConexionColumn] = value;
                }
            }
            
            public System.DateTime HabilitacionCuenta {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableUsuarios.HabilitacionCuentaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsuarios.HabilitacionCuentaColumn] = value;
                }
            }
            
            public bool Administrador {
                get {
                    try {
                        return ((bool)(this[this.tableUsuarios.AdministradorColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsuarios.AdministradorColumn] = value;
                }
            }
            
            public bool ClaveNuncaCaduca {
                get {
                    try {
                        return ((bool)(this[this.tableUsuarios.ClaveNuncaCaducaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsuarios.ClaveNuncaCaducaColumn] = value;
                }
            }
            
            public bool PermiteCambioClave {
                get {
                    try {
                        return ((bool)(this[this.tableUsuarios.PermiteCambioClaveColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsuarios.PermiteCambioClaveColumn] = value;
                }
            }
            
            public long ResponsableUltimaModificacion {
                get {
                    try {
                        return ((long)(this[this.tableUsuarios.ResponsableUltimaModificacionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsuarios.ResponsableUltimaModificacionColumn] = value;
                }
            }
            
            public long PerfilUtilizado {
                get {
                    try {
                        return ((long)(this[this.tableUsuarios.PerfilUtilizadoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsuarios.PerfilUtilizadoColumn] = value;
                }
            }
            
            public bool Activo {
                get {
                    try {
                        return ((bool)(this[this.tableUsuarios.ActivoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsuarios.ActivoColumn] = value;
                }
            }
            
            public System.DateTime FechaCreacion {
                get {
                    return ((System.DateTime)(this[this.tableUsuarios.FechaCreacionColumn]));
                }
                set {
                    this[this.tableUsuarios.FechaCreacionColumn] = value;
                }
            }
            
            public long IdConexionCreacion {
                get {
                    return ((long)(this[this.tableUsuarios.IdConexionCreacionColumn]));
                }
                set {
                    this[this.tableUsuarios.IdConexionCreacionColumn] = value;
                }
            }
            
            public System.Byte[] UltimaModificacion {
                get {
                    try {
                        return ((System.Byte[])(this[this.tableUsuarios.UltimaModificacionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsuarios.UltimaModificacionColumn] = value;
                }
            }
            
            public long IdConexionUltimaModificacion {
                get {
                    try {
                        return ((long)(this[this.tableUsuarios.IdConexionUltimaModificacionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsuarios.IdConexionUltimaModificacionColumn] = value;
                }
            }
            
            public System.Guid RowId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableUsuarios.RowIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsuarios.RowIdColumn] = value;
                }
            }
            
            public bool IsUltimaConexionNull() {
                return this.IsNull(this.tableUsuarios.UltimaConexionColumn);
            }
            
            public void SetUltimaConexionNull() {
                this[this.tableUsuarios.UltimaConexionColumn] = System.Convert.DBNull;
            }
            
            public bool IsExpiracionNull() {
                return this.IsNull(this.tableUsuarios.ExpiracionColumn);
            }
            
            public void SetExpiracionNull() {
                this[this.tableUsuarios.ExpiracionColumn] = System.Convert.DBNull;
            }
            
            public bool IsDiasValidezClaveNull() {
                return this.IsNull(this.tableUsuarios.DiasValidezClaveColumn);
            }
            
            public void SetDiasValidezClaveNull() {
                this[this.tableUsuarios.DiasValidezClaveColumn] = System.Convert.DBNull;
            }
            
            public bool IsBloqueadoNull() {
                return this.IsNull(this.tableUsuarios.BloqueadoColumn);
            }
            
            public void SetBloqueadoNull() {
                this[this.tableUsuarios.BloqueadoColumn] = System.Convert.DBNull;
            }
            
            public bool IsHabilitacionCuentaNull() {
                return this.IsNull(this.tableUsuarios.HabilitacionCuentaColumn);
            }
            
            public void SetHabilitacionCuentaNull() {
                this[this.tableUsuarios.HabilitacionCuentaColumn] = System.Convert.DBNull;
            }
            
            public bool IsAdministradorNull() {
                return this.IsNull(this.tableUsuarios.AdministradorColumn);
            }
            
            public void SetAdministradorNull() {
                this[this.tableUsuarios.AdministradorColumn] = System.Convert.DBNull;
            }
            
            public bool IsClaveNuncaCaducaNull() {
                return this.IsNull(this.tableUsuarios.ClaveNuncaCaducaColumn);
            }
            
            public void SetClaveNuncaCaducaNull() {
                this[this.tableUsuarios.ClaveNuncaCaducaColumn] = System.Convert.DBNull;
            }
            
            public bool IsPermiteCambioClaveNull() {
                return this.IsNull(this.tableUsuarios.PermiteCambioClaveColumn);
            }
            
            public void SetPermiteCambioClaveNull() {
                this[this.tableUsuarios.PermiteCambioClaveColumn] = System.Convert.DBNull;
            }
            
            public bool IsResponsableUltimaModificacionNull() {
                return this.IsNull(this.tableUsuarios.ResponsableUltimaModificacionColumn);
            }
            
            public void SetResponsableUltimaModificacionNull() {
                this[this.tableUsuarios.ResponsableUltimaModificacionColumn] = System.Convert.DBNull;
            }
            
            public bool IsPerfilUtilizadoNull() {
                return this.IsNull(this.tableUsuarios.PerfilUtilizadoColumn);
            }
            
            public void SetPerfilUtilizadoNull() {
                this[this.tableUsuarios.PerfilUtilizadoColumn] = System.Convert.DBNull;
            }
            
            public bool IsActivoNull() {
                return this.IsNull(this.tableUsuarios.ActivoColumn);
            }
            
            public void SetActivoNull() {
                this[this.tableUsuarios.ActivoColumn] = System.Convert.DBNull;
            }
            
            public bool IsUltimaModificacionNull() {
                return this.IsNull(this.tableUsuarios.UltimaModificacionColumn);
            }
            
            public void SetUltimaModificacionNull() {
                this[this.tableUsuarios.UltimaModificacionColumn] = System.Convert.DBNull;
            }
            
            public bool IsIdConexionUltimaModificacionNull() {
                return this.IsNull(this.tableUsuarios.IdConexionUltimaModificacionColumn);
            }
            
            public void SetIdConexionUltimaModificacionNull() {
                this[this.tableUsuarios.IdConexionUltimaModificacionColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowIdNull() {
                return this.IsNull(this.tableUsuarios.RowIdColumn);
            }
            
            public void SetRowIdNull() {
                this[this.tableUsuarios.RowIdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UsuariosRowChangeEvent : EventArgs {
            
            private UsuariosRow eventRow;
            
            private DataRowAction eventAction;
            
            public UsuariosRowChangeEvent(UsuariosRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public UsuariosRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
