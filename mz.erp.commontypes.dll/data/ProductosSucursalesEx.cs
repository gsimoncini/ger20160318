//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace mz.erp.commontypes.data {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class ProductosSucursalesExDataset : DataSet {
        
        private ProductosSucursalesDataTable tableProductosSucursales;
        
        public ProductosSucursalesExDataset() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ProductosSucursalesExDataset(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["ProductosSucursales"] != null)) {
                    this.Tables.Add(new ProductosSucursalesDataTable(ds.Tables["ProductosSucursales"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProductosSucursalesDataTable ProductosSucursales {
            get {
                return this.tableProductosSucursales;
            }
        }
        
        public override DataSet Clone() {
            ProductosSucursalesExDataset cln = ((ProductosSucursalesExDataset)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["ProductosSucursales"] != null)) {
                this.Tables.Add(new ProductosSucursalesDataTable(ds.Tables["ProductosSucursales"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableProductosSucursales = ((ProductosSucursalesDataTable)(this.Tables["ProductosSucursales"]));
            if ((this.tableProductosSucursales != null)) {
                this.tableProductosSucursales.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "ProductosSucursalesExDataset";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ProductosSucursalesEx.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableProductosSucursales = new ProductosSucursalesDataTable();
            this.Tables.Add(this.tableProductosSucursales);
        }
        
        private bool ShouldSerializeProductosSucursales() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ProductosSucursalesRowChangeEventHandler(object sender, ProductosSucursalesRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProductosSucursalesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnIdProducto;
            
            private DataColumn columnIdSucursal;
            
            private DataColumn columnActivo;
            
            private DataColumn columnRentabilidad;
            
            private DataColumn columnStockMinimo;
            
            private DataColumn columnStockMaximo;
            
            private DataColumn columnStockVisible;
            
            private DataColumn columnCosto;
            
            private DataColumn columnPrecioVenta;
            
            private DataColumn columnIdEmpresa;
            
            internal ProductosSucursalesDataTable() : 
                    base("ProductosSucursales") {
                this.InitClass();
            }
            
            internal ProductosSucursalesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IdProductoColumn {
                get {
                    return this.columnIdProducto;
                }
            }
            
            internal DataColumn IdSucursalColumn {
                get {
                    return this.columnIdSucursal;
                }
            }
            
            internal DataColumn ActivoColumn {
                get {
                    return this.columnActivo;
                }
            }
            
            internal DataColumn RentabilidadColumn {
                get {
                    return this.columnRentabilidad;
                }
            }
            
            internal DataColumn StockMinimoColumn {
                get {
                    return this.columnStockMinimo;
                }
            }
            
            internal DataColumn StockMaximoColumn {
                get {
                    return this.columnStockMaximo;
                }
            }
            
            internal DataColumn StockVisibleColumn {
                get {
                    return this.columnStockVisible;
                }
            }
            
            internal DataColumn CostoColumn {
                get {
                    return this.columnCosto;
                }
            }
            
            internal DataColumn PrecioVentaColumn {
                get {
                    return this.columnPrecioVenta;
                }
            }
            
            internal DataColumn IdEmpresaColumn {
                get {
                    return this.columnIdEmpresa;
                }
            }
            
            public ProductosSucursalesRow this[int index] {
                get {
                    return ((ProductosSucursalesRow)(this.Rows[index]));
                }
            }
            
            public event ProductosSucursalesRowChangeEventHandler ProductosSucursalesRowChanged;
            
            public event ProductosSucursalesRowChangeEventHandler ProductosSucursalesRowChanging;
            
            public event ProductosSucursalesRowChangeEventHandler ProductosSucursalesRowDeleted;
            
            public event ProductosSucursalesRowChangeEventHandler ProductosSucursalesRowDeleting;
            
            public void AddProductosSucursalesRow(ProductosSucursalesRow row) {
                this.Rows.Add(row);
            }
            
            public ProductosSucursalesRow AddProductosSucursalesRow(long IdProducto, long IdSucursal, bool Activo, System.Decimal Rentabilidad, System.Decimal StockMinimo, System.Decimal StockMaximo, System.Decimal StockVisible, System.Decimal Costo, System.Decimal PrecioVenta, long IdEmpresa) {
                ProductosSucursalesRow rowProductosSucursalesRow = ((ProductosSucursalesRow)(this.NewRow()));
                rowProductosSucursalesRow.ItemArray = new object[] {
                        IdProducto,
                        IdSucursal,
                        Activo,
                        Rentabilidad,
                        StockMinimo,
                        StockMaximo,
                        StockVisible,
                        Costo,
                        PrecioVenta,
                        IdEmpresa};
                this.Rows.Add(rowProductosSucursalesRow);
                return rowProductosSucursalesRow;
            }
            
            public ProductosSucursalesRow FindByIdProductoIdSucursal(long IdProducto, long IdSucursal) {
                return ((ProductosSucursalesRow)(this.Rows.Find(new object[] {
                            IdProducto,
                            IdSucursal})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ProductosSucursalesDataTable cln = ((ProductosSucursalesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ProductosSucursalesDataTable();
            }
            
            internal void InitVars() {
                this.columnIdProducto = this.Columns["IdProducto"];
                this.columnIdSucursal = this.Columns["IdSucursal"];
                this.columnActivo = this.Columns["Activo"];
                this.columnRentabilidad = this.Columns["Rentabilidad"];
                this.columnStockMinimo = this.Columns["StockMinimo"];
                this.columnStockMaximo = this.Columns["StockMaximo"];
                this.columnStockVisible = this.Columns["StockVisible"];
                this.columnCosto = this.Columns["Costo"];
                this.columnPrecioVenta = this.Columns["PrecioVenta"];
                this.columnIdEmpresa = this.Columns["IdEmpresa"];
            }
            
            private void InitClass() {
                this.columnIdProducto = new DataColumn("IdProducto", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIdProducto);
                this.columnIdSucursal = new DataColumn("IdSucursal", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIdSucursal);
                this.columnActivo = new DataColumn("Activo", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnActivo);
                this.columnRentabilidad = new DataColumn("Rentabilidad", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRentabilidad);
                this.columnStockMinimo = new DataColumn("StockMinimo", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStockMinimo);
                this.columnStockMaximo = new DataColumn("StockMaximo", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStockMaximo);
                this.columnStockVisible = new DataColumn("StockVisible", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStockVisible);
                this.columnCosto = new DataColumn("Costo", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCosto);
                this.columnPrecioVenta = new DataColumn("PrecioVenta", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrecioVenta);
                this.columnIdEmpresa = new DataColumn("IdEmpresa", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIdEmpresa);
                this.Constraints.Add(new UniqueConstraint("ProductosSucursalesExKey1", new DataColumn[] {
                                this.columnIdProducto,
                                this.columnIdSucursal}, true));
                this.columnIdProducto.AllowDBNull = false;
                this.columnIdSucursal.AllowDBNull = false;
            }
            
            public ProductosSucursalesRow NewProductosSucursalesRow() {
                return ((ProductosSucursalesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ProductosSucursalesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ProductosSucursalesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProductosSucursalesRowChanged != null)) {
                    this.ProductosSucursalesRowChanged(this, new ProductosSucursalesRowChangeEvent(((ProductosSucursalesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProductosSucursalesRowChanging != null)) {
                    this.ProductosSucursalesRowChanging(this, new ProductosSucursalesRowChangeEvent(((ProductosSucursalesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProductosSucursalesRowDeleted != null)) {
                    this.ProductosSucursalesRowDeleted(this, new ProductosSucursalesRowChangeEvent(((ProductosSucursalesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProductosSucursalesRowDeleting != null)) {
                    this.ProductosSucursalesRowDeleting(this, new ProductosSucursalesRowChangeEvent(((ProductosSucursalesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveProductosSucursalesRow(ProductosSucursalesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProductosSucursalesRow : DataRow {
            
            private ProductosSucursalesDataTable tableProductosSucursales;
            
            internal ProductosSucursalesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableProductosSucursales = ((ProductosSucursalesDataTable)(this.Table));
            }
            
            public long IdProducto {
                get {
                    return ((long)(this[this.tableProductosSucursales.IdProductoColumn]));
                }
                set {
                    this[this.tableProductosSucursales.IdProductoColumn] = value;
                }
            }
            
            public long IdSucursal {
                get {
                    return ((long)(this[this.tableProductosSucursales.IdSucursalColumn]));
                }
                set {
                    this[this.tableProductosSucursales.IdSucursalColumn] = value;
                }
            }
            
            public bool Activo {
                get {
                    try {
                        return ((bool)(this[this.tableProductosSucursales.ActivoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableProductosSucursales.ActivoColumn] = value;
                }
            }
            
            public System.Decimal Rentabilidad {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableProductosSucursales.RentabilidadColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableProductosSucursales.RentabilidadColumn] = value;
                }
            }
            
            public System.Decimal StockMinimo {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableProductosSucursales.StockMinimoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableProductosSucursales.StockMinimoColumn] = value;
                }
            }
            
            public System.Decimal StockMaximo {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableProductosSucursales.StockMaximoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableProductosSucursales.StockMaximoColumn] = value;
                }
            }
            
            public System.Decimal StockVisible {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableProductosSucursales.StockVisibleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableProductosSucursales.StockVisibleColumn] = value;
                }
            }
            
            public System.Decimal Costo {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableProductosSucursales.CostoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableProductosSucursales.CostoColumn] = value;
                }
            }
            
            public System.Decimal PrecioVenta {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableProductosSucursales.PrecioVentaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableProductosSucursales.PrecioVentaColumn] = value;
                }
            }
            
            public long IdEmpresa {
                get {
                    try {
                        return ((long)(this[this.tableProductosSucursales.IdEmpresaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableProductosSucursales.IdEmpresaColumn] = value;
                }
            }
            
            public bool IsActivoNull() {
                return this.IsNull(this.tableProductosSucursales.ActivoColumn);
            }
            
            public void SetActivoNull() {
                this[this.tableProductosSucursales.ActivoColumn] = System.Convert.DBNull;
            }
            
            public bool IsRentabilidadNull() {
                return this.IsNull(this.tableProductosSucursales.RentabilidadColumn);
            }
            
            public void SetRentabilidadNull() {
                this[this.tableProductosSucursales.RentabilidadColumn] = System.Convert.DBNull;
            }
            
            public bool IsStockMinimoNull() {
                return this.IsNull(this.tableProductosSucursales.StockMinimoColumn);
            }
            
            public void SetStockMinimoNull() {
                this[this.tableProductosSucursales.StockMinimoColumn] = System.Convert.DBNull;
            }
            
            public bool IsStockMaximoNull() {
                return this.IsNull(this.tableProductosSucursales.StockMaximoColumn);
            }
            
            public void SetStockMaximoNull() {
                this[this.tableProductosSucursales.StockMaximoColumn] = System.Convert.DBNull;
            }
            
            public bool IsStockVisibleNull() {
                return this.IsNull(this.tableProductosSucursales.StockVisibleColumn);
            }
            
            public void SetStockVisibleNull() {
                this[this.tableProductosSucursales.StockVisibleColumn] = System.Convert.DBNull;
            }
            
            public bool IsCostoNull() {
                return this.IsNull(this.tableProductosSucursales.CostoColumn);
            }
            
            public void SetCostoNull() {
                this[this.tableProductosSucursales.CostoColumn] = System.Convert.DBNull;
            }
            
            public bool IsPrecioVentaNull() {
                return this.IsNull(this.tableProductosSucursales.PrecioVentaColumn);
            }
            
            public void SetPrecioVentaNull() {
                this[this.tableProductosSucursales.PrecioVentaColumn] = System.Convert.DBNull;
            }
            
            public bool IsIdEmpresaNull() {
                return this.IsNull(this.tableProductosSucursales.IdEmpresaColumn);
            }
            
            public void SetIdEmpresaNull() {
                this[this.tableProductosSucursales.IdEmpresaColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProductosSucursalesRowChangeEvent : EventArgs {
            
            private ProductosSucursalesRow eventRow;
            
            private DataRowAction eventAction;
            
            public ProductosSucursalesRowChangeEvent(ProductosSucursalesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ProductosSucursalesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
