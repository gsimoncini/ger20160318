//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace mz.erp.commontypes.data {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class ElementosNavegacionDataset : DataSet {
        
        private ElementosNavegacionDataTable tableElementosNavegacion;
        
        public ElementosNavegacionDataset() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ElementosNavegacionDataset(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["ElementosNavegacion"] != null)) {
                    this.Tables.Add(new ElementosNavegacionDataTable(ds.Tables["ElementosNavegacion"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ElementosNavegacionDataTable ElementosNavegacion {
            get {
                return this.tableElementosNavegacion;
            }
        }
        
        public override DataSet Clone() {
            ElementosNavegacionDataset cln = ((ElementosNavegacionDataset)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["ElementosNavegacion"] != null)) {
                this.Tables.Add(new ElementosNavegacionDataTable(ds.Tables["ElementosNavegacion"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableElementosNavegacion = ((ElementosNavegacionDataTable)(this.Tables["ElementosNavegacion"]));
            if ((this.tableElementosNavegacion != null)) {
                this.tableElementosNavegacion.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "ElementosNavegacionDataset";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ElementosNavegacionDataset.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableElementosNavegacion = new ElementosNavegacionDataTable();
            this.Tables.Add(this.tableElementosNavegacion);
        }
        
        private bool ShouldSerializeElementosNavegacion() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ElementosNavegacionRowChangeEventHandler(object sender, ElementosNavegacionRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ElementosNavegacionDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnidElementoNavegacion;
            
            private DataColumn columnidElementoNavegacionPadre;
            
            private DataColumn columnHabilitado;
            
            private DataColumn columnidConexion;
            
            private DataColumn columnUltimaModificacion;
            
            private DataColumn columnRowID;
            
            internal ElementosNavegacionDataTable() : 
                    base("ElementosNavegacion") {
                this.InitClass();
            }
            
            internal ElementosNavegacionDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idElementoNavegacionColumn {
                get {
                    return this.columnidElementoNavegacion;
                }
            }
            
            internal DataColumn idElementoNavegacionPadreColumn {
                get {
                    return this.columnidElementoNavegacionPadre;
                }
            }
            
            internal DataColumn HabilitadoColumn {
                get {
                    return this.columnHabilitado;
                }
            }
            
            internal DataColumn idConexionColumn {
                get {
                    return this.columnidConexion;
                }
            }
            
            internal DataColumn UltimaModificacionColumn {
                get {
                    return this.columnUltimaModificacion;
                }
            }
            
            internal DataColumn RowIDColumn {
                get {
                    return this.columnRowID;
                }
            }
            
            public ElementosNavegacionRow this[int index] {
                get {
                    return ((ElementosNavegacionRow)(this.Rows[index]));
                }
            }
            
            public event ElementosNavegacionRowChangeEventHandler ElementosNavegacionRowChanged;
            
            public event ElementosNavegacionRowChangeEventHandler ElementosNavegacionRowChanging;
            
            public event ElementosNavegacionRowChangeEventHandler ElementosNavegacionRowDeleted;
            
            public event ElementosNavegacionRowChangeEventHandler ElementosNavegacionRowDeleting;
            
            public void AddElementosNavegacionRow(ElementosNavegacionRow row) {
                this.Rows.Add(row);
            }
            
            public ElementosNavegacionRow AddElementosNavegacionRow(long idElementoNavegacion, long idElementoNavegacionPadre, bool Habilitado, long idConexion, System.Byte[] UltimaModificacion, System.Guid RowID) {
                ElementosNavegacionRow rowElementosNavegacionRow = ((ElementosNavegacionRow)(this.NewRow()));
                rowElementosNavegacionRow.ItemArray = new object[] {
                        idElementoNavegacion,
                        idElementoNavegacionPadre,
                        Habilitado,
                        idConexion,
                        UltimaModificacion,
                        RowID};
                this.Rows.Add(rowElementosNavegacionRow);
                return rowElementosNavegacionRow;
            }
            
            public ElementosNavegacionRow FindByidElementoNavegacion(long idElementoNavegacion) {
                return ((ElementosNavegacionRow)(this.Rows.Find(new object[] {
                            idElementoNavegacion})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ElementosNavegacionDataTable cln = ((ElementosNavegacionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ElementosNavegacionDataTable();
            }
            
            internal void InitVars() {
                this.columnidElementoNavegacion = this.Columns["idElementoNavegacion"];
                this.columnidElementoNavegacionPadre = this.Columns["idElementoNavegacionPadre"];
                this.columnHabilitado = this.Columns["Habilitado"];
                this.columnidConexion = this.Columns["idConexion"];
                this.columnUltimaModificacion = this.Columns["UltimaModificacion"];
                this.columnRowID = this.Columns["RowID"];
            }
            
            private void InitClass() {
                this.columnidElementoNavegacion = new DataColumn("idElementoNavegacion", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidElementoNavegacion);
                this.columnidElementoNavegacionPadre = new DataColumn("idElementoNavegacionPadre", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidElementoNavegacionPadre);
                this.columnHabilitado = new DataColumn("Habilitado", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHabilitado);
                this.columnidConexion = new DataColumn("idConexion", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidConexion);
                this.columnUltimaModificacion = new DataColumn("UltimaModificacion", typeof(System.Byte[]), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUltimaModificacion);
                this.columnRowID = new DataColumn("RowID", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowID);
                this.Constraints.Add(new UniqueConstraint("ElementosNavegacionDatasetKey1", new DataColumn[] {
                                this.columnidElementoNavegacion}, true));
                this.columnidElementoNavegacion.AllowDBNull = false;
                this.columnidElementoNavegacion.Unique = true;
                this.columnUltimaModificacion.ReadOnly = true;
            }
            
            public ElementosNavegacionRow NewElementosNavegacionRow() {
                return ((ElementosNavegacionRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ElementosNavegacionRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ElementosNavegacionRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ElementosNavegacionRowChanged != null)) {
                    this.ElementosNavegacionRowChanged(this, new ElementosNavegacionRowChangeEvent(((ElementosNavegacionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ElementosNavegacionRowChanging != null)) {
                    this.ElementosNavegacionRowChanging(this, new ElementosNavegacionRowChangeEvent(((ElementosNavegacionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ElementosNavegacionRowDeleted != null)) {
                    this.ElementosNavegacionRowDeleted(this, new ElementosNavegacionRowChangeEvent(((ElementosNavegacionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ElementosNavegacionRowDeleting != null)) {
                    this.ElementosNavegacionRowDeleting(this, new ElementosNavegacionRowChangeEvent(((ElementosNavegacionRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveElementosNavegacionRow(ElementosNavegacionRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ElementosNavegacionRow : DataRow {
            
            private ElementosNavegacionDataTable tableElementosNavegacion;
            
            internal ElementosNavegacionRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableElementosNavegacion = ((ElementosNavegacionDataTable)(this.Table));
            }
            
            public long idElementoNavegacion {
                get {
                    return ((long)(this[this.tableElementosNavegacion.idElementoNavegacionColumn]));
                }
                set {
                    this[this.tableElementosNavegacion.idElementoNavegacionColumn] = value;
                }
            }
            
            public long idElementoNavegacionPadre {
                get {
                    try {
                        return ((long)(this[this.tableElementosNavegacion.idElementoNavegacionPadreColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableElementosNavegacion.idElementoNavegacionPadreColumn] = value;
                }
            }
            
            public bool Habilitado {
                get {
                    try {
                        return ((bool)(this[this.tableElementosNavegacion.HabilitadoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableElementosNavegacion.HabilitadoColumn] = value;
                }
            }
            
            public long idConexion {
                get {
                    try {
                        return ((long)(this[this.tableElementosNavegacion.idConexionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableElementosNavegacion.idConexionColumn] = value;
                }
            }
            
            public System.Byte[] UltimaModificacion {
                get {
                    try {
                        return ((System.Byte[])(this[this.tableElementosNavegacion.UltimaModificacionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableElementosNavegacion.UltimaModificacionColumn] = value;
                }
            }
            
            public System.Guid RowID {
                get {
                    try {
                        return ((System.Guid)(this[this.tableElementosNavegacion.RowIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableElementosNavegacion.RowIDColumn] = value;
                }
            }
            
            public bool IsidElementoNavegacionPadreNull() {
                return this.IsNull(this.tableElementosNavegacion.idElementoNavegacionPadreColumn);
            }
            
            public void SetidElementoNavegacionPadreNull() {
                this[this.tableElementosNavegacion.idElementoNavegacionPadreColumn] = System.Convert.DBNull;
            }
            
            public bool IsHabilitadoNull() {
                return this.IsNull(this.tableElementosNavegacion.HabilitadoColumn);
            }
            
            public void SetHabilitadoNull() {
                this[this.tableElementosNavegacion.HabilitadoColumn] = System.Convert.DBNull;
            }
            
            public bool IsidConexionNull() {
                return this.IsNull(this.tableElementosNavegacion.idConexionColumn);
            }
            
            public void SetidConexionNull() {
                this[this.tableElementosNavegacion.idConexionColumn] = System.Convert.DBNull;
            }
            
            public bool IsUltimaModificacionNull() {
                return this.IsNull(this.tableElementosNavegacion.UltimaModificacionColumn);
            }
            
            public void SetUltimaModificacionNull() {
                this[this.tableElementosNavegacion.UltimaModificacionColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowIDNull() {
                return this.IsNull(this.tableElementosNavegacion.RowIDColumn);
            }
            
            public void SetRowIDNull() {
                this[this.tableElementosNavegacion.RowIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ElementosNavegacionRowChangeEvent : EventArgs {
            
            private ElementosNavegacionRow eventRow;
            
            private DataRowAction eventAction;
            
            public ElementosNavegacionRowChangeEvent(ElementosNavegacionRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ElementosNavegacionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
