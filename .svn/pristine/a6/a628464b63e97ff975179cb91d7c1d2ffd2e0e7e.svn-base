//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2407
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace mz.erp.commontypes.data {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class tsa_FacturasImpagasDataset : DataSet {
        
        private tsa_FacturasImpagasDataTable tabletsa_FacturasImpagas;
        
        public tsa_FacturasImpagasDataset() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected tsa_FacturasImpagasDataset(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["tsa_FacturasImpagas"] != null)) {
                    this.Tables.Add(new tsa_FacturasImpagasDataTable(ds.Tables["tsa_FacturasImpagas"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tsa_FacturasImpagasDataTable tsa_FacturasImpagas {
            get {
                return this.tabletsa_FacturasImpagas;
            }
        }
        
        public override DataSet Clone() {
            tsa_FacturasImpagasDataset cln = ((tsa_FacturasImpagasDataset)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["tsa_FacturasImpagas"] != null)) {
                this.Tables.Add(new tsa_FacturasImpagasDataTable(ds.Tables["tsa_FacturasImpagas"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tabletsa_FacturasImpagas = ((tsa_FacturasImpagasDataTable)(this.Tables["tsa_FacturasImpagas"]));
            if ((this.tabletsa_FacturasImpagas != null)) {
                this.tabletsa_FacturasImpagas.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "tsa_FacturasImpagasDataset";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/tsa_FacturasImpagas.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tabletsa_FacturasImpagas = new tsa_FacturasImpagasDataTable();
            this.Tables.Add(this.tabletsa_FacturasImpagas);
        }
        
        private bool ShouldSerializetsa_FacturasImpagas() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void tsa_FacturasImpagasRowChangeEventHandler(object sender, tsa_FacturasImpagasRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tsa_FacturasImpagasDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnIdCuenta;
            
            private DataColumn columnCuenta;
            
            private DataColumn columnIdComprobante;
            
            private DataColumn columnNumero;
            
            private DataColumn columnIdTipoDeComprobante;
            
            private DataColumn columnTipoDeComprobante;
            
            private DataColumn columnFechaEmision;
            
            private DataColumn columnFechaVencimiento;
            
            private DataColumn columnVendedores;
            
            private DataColumn columnTotal;
            
            private DataColumn columnSaldoFactura;
            
            private DataColumn columnIdTiposComprobantesPredecesores;
            
            private DataColumn columnIdOrdenReparaciones;
            
            private DataColumn columnSaldoCtaCte;
            
            private DataColumn columnSaldoCtaCteDV;
            
            private DataColumn columnSaldoCtaCteConsolidado;
            
            private DataColumn columnFechaCreacion;
            
            private DataColumn columnIdConexionCreacion;
            
            private DataColumn columnUltimaModificacion;
            
            private DataColumn columnIdConexionUltimaModificacion;
            
            private DataColumn columnRowId;
            
            internal tsa_FacturasImpagasDataTable() : 
                    base("tsa_FacturasImpagas") {
                this.InitClass();
            }
            
            internal tsa_FacturasImpagasDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IdCuentaColumn {
                get {
                    return this.columnIdCuenta;
                }
            }
            
            internal DataColumn CuentaColumn {
                get {
                    return this.columnCuenta;
                }
            }
            
            internal DataColumn IdComprobanteColumn {
                get {
                    return this.columnIdComprobante;
                }
            }
            
            internal DataColumn NumeroColumn {
                get {
                    return this.columnNumero;
                }
            }
            
            internal DataColumn IdTipoDeComprobanteColumn {
                get {
                    return this.columnIdTipoDeComprobante;
                }
            }
            
            internal DataColumn TipoDeComprobanteColumn {
                get {
                    return this.columnTipoDeComprobante;
                }
            }
            
            internal DataColumn FechaEmisionColumn {
                get {
                    return this.columnFechaEmision;
                }
            }
            
            internal DataColumn FechaVencimientoColumn {
                get {
                    return this.columnFechaVencimiento;
                }
            }
            
            internal DataColumn VendedoresColumn {
                get {
                    return this.columnVendedores;
                }
            }
            
            internal DataColumn TotalColumn {
                get {
                    return this.columnTotal;
                }
            }
            
            internal DataColumn SaldoFacturaColumn {
                get {
                    return this.columnSaldoFactura;
                }
            }
            
            internal DataColumn IdTiposComprobantesPredecesoresColumn {
                get {
                    return this.columnIdTiposComprobantesPredecesores;
                }
            }
            
            internal DataColumn IdOrdenReparacionesColumn {
                get {
                    return this.columnIdOrdenReparaciones;
                }
            }
            
            internal DataColumn SaldoCtaCteColumn {
                get {
                    return this.columnSaldoCtaCte;
                }
            }
            
            internal DataColumn SaldoCtaCteDVColumn {
                get {
                    return this.columnSaldoCtaCteDV;
                }
            }
            
            internal DataColumn SaldoCtaCteConsolidadoColumn {
                get {
                    return this.columnSaldoCtaCteConsolidado;
                }
            }
            
            internal DataColumn FechaCreacionColumn {
                get {
                    return this.columnFechaCreacion;
                }
            }
            
            internal DataColumn IdConexionCreacionColumn {
                get {
                    return this.columnIdConexionCreacion;
                }
            }
            
            internal DataColumn UltimaModificacionColumn {
                get {
                    return this.columnUltimaModificacion;
                }
            }
            
            internal DataColumn IdConexionUltimaModificacionColumn {
                get {
                    return this.columnIdConexionUltimaModificacion;
                }
            }
            
            internal DataColumn RowIdColumn {
                get {
                    return this.columnRowId;
                }
            }
            
            public tsa_FacturasImpagasRow this[int index] {
                get {
                    return ((tsa_FacturasImpagasRow)(this.Rows[index]));
                }
            }
            
            public event tsa_FacturasImpagasRowChangeEventHandler tsa_FacturasImpagasRowChanged;
            
            public event tsa_FacturasImpagasRowChangeEventHandler tsa_FacturasImpagasRowChanging;
            
            public event tsa_FacturasImpagasRowChangeEventHandler tsa_FacturasImpagasRowDeleted;
            
            public event tsa_FacturasImpagasRowChangeEventHandler tsa_FacturasImpagasRowDeleting;
            
            public void Addtsa_FacturasImpagasRow(tsa_FacturasImpagasRow row) {
                this.Rows.Add(row);
            }
            
            public tsa_FacturasImpagasRow Addtsa_FacturasImpagasRow(
                        string IdCuenta, 
                        string Cuenta, 
                        string IdComprobante, 
                        string Numero, 
                        string IdTipoDeComprobante, 
                        string TipoDeComprobante, 
                        System.DateTime FechaEmision, 
                        System.DateTime FechaVencimiento, 
                        string Vendedores, 
                        System.Decimal Total, 
                        System.Decimal SaldoFactura, 
                        string IdTiposComprobantesPredecesores, 
                        string IdOrdenReparaciones, 
                        System.Decimal SaldoCtaCte, 
                        System.Decimal SaldoCtaCteDV, 
                        System.Decimal SaldoCtaCteConsolidado, 
                        System.DateTime FechaCreacion, 
                        long IdConexionCreacion, 
                        System.Byte[] UltimaModificacion, 
                        long IdConexionUltimaModificacion, 
                        System.Guid RowId) {
                tsa_FacturasImpagasRow rowtsa_FacturasImpagasRow = ((tsa_FacturasImpagasRow)(this.NewRow()));
                rowtsa_FacturasImpagasRow.ItemArray = new object[] {
                        IdCuenta,
                        Cuenta,
                        IdComprobante,
                        Numero,
                        IdTipoDeComprobante,
                        TipoDeComprobante,
                        FechaEmision,
                        FechaVencimiento,
                        Vendedores,
                        Total,
                        SaldoFactura,
                        IdTiposComprobantesPredecesores,
                        IdOrdenReparaciones,
                        SaldoCtaCte,
                        SaldoCtaCteDV,
                        SaldoCtaCteConsolidado,
                        FechaCreacion,
                        IdConexionCreacion,
                        UltimaModificacion,
                        IdConexionUltimaModificacion,
                        RowId};
                this.Rows.Add(rowtsa_FacturasImpagasRow);
                return rowtsa_FacturasImpagasRow;
            }
            
            public tsa_FacturasImpagasRow FindByIdCuentaIdComprobante(string IdCuenta, string IdComprobante) {
                return ((tsa_FacturasImpagasRow)(this.Rows.Find(new object[] {
                            IdCuenta,
                            IdComprobante})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                tsa_FacturasImpagasDataTable cln = ((tsa_FacturasImpagasDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new tsa_FacturasImpagasDataTable();
            }
            
            internal void InitVars() {
                this.columnIdCuenta = this.Columns["IdCuenta"];
                this.columnCuenta = this.Columns["Cuenta"];
                this.columnIdComprobante = this.Columns["IdComprobante"];
                this.columnNumero = this.Columns["Numero"];
                this.columnIdTipoDeComprobante = this.Columns["IdTipoDeComprobante"];
                this.columnTipoDeComprobante = this.Columns["TipoDeComprobante"];
                this.columnFechaEmision = this.Columns["FechaEmision"];
                this.columnFechaVencimiento = this.Columns["FechaVencimiento"];
                this.columnVendedores = this.Columns["Vendedores"];
                this.columnTotal = this.Columns["Total"];
                this.columnSaldoFactura = this.Columns["SaldoFactura"];
                this.columnIdTiposComprobantesPredecesores = this.Columns["IdTiposComprobantesPredecesores"];
                this.columnIdOrdenReparaciones = this.Columns["IdOrdenReparaciones"];
                this.columnSaldoCtaCte = this.Columns["SaldoCtaCte"];
                this.columnSaldoCtaCteDV = this.Columns["SaldoCtaCteDV"];
                this.columnSaldoCtaCteConsolidado = this.Columns["SaldoCtaCteConsolidado"];
                this.columnFechaCreacion = this.Columns["FechaCreacion"];
                this.columnIdConexionCreacion = this.Columns["IdConexionCreacion"];
                this.columnUltimaModificacion = this.Columns["UltimaModificacion"];
                this.columnIdConexionUltimaModificacion = this.Columns["IdConexionUltimaModificacion"];
                this.columnRowId = this.Columns["RowId"];
            }
            
            private void InitClass() {
                this.columnIdCuenta = new DataColumn("IdCuenta", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIdCuenta);
                this.columnCuenta = new DataColumn("Cuenta", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCuenta);
                this.columnIdComprobante = new DataColumn("IdComprobante", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIdComprobante);
                this.columnNumero = new DataColumn("Numero", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumero);
                this.columnIdTipoDeComprobante = new DataColumn("IdTipoDeComprobante", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIdTipoDeComprobante);
                this.columnTipoDeComprobante = new DataColumn("TipoDeComprobante", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTipoDeComprobante);
                this.columnFechaEmision = new DataColumn("FechaEmision", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFechaEmision);
                this.columnFechaVencimiento = new DataColumn("FechaVencimiento", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFechaVencimiento);
                this.columnVendedores = new DataColumn("Vendedores", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVendedores);
                this.columnTotal = new DataColumn("Total", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTotal);
                this.columnSaldoFactura = new DataColumn("SaldoFactura", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSaldoFactura);
                this.columnIdTiposComprobantesPredecesores = new DataColumn("IdTiposComprobantesPredecesores", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIdTiposComprobantesPredecesores);
                this.columnIdOrdenReparaciones = new DataColumn("IdOrdenReparaciones", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIdOrdenReparaciones);
                this.columnSaldoCtaCte = new DataColumn("SaldoCtaCte", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSaldoCtaCte);
                this.columnSaldoCtaCteDV = new DataColumn("SaldoCtaCteDV", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSaldoCtaCteDV);
                this.columnSaldoCtaCteConsolidado = new DataColumn("SaldoCtaCteConsolidado", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSaldoCtaCteConsolidado);
                this.columnFechaCreacion = new DataColumn("FechaCreacion", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFechaCreacion);
                this.columnIdConexionCreacion = new DataColumn("IdConexionCreacion", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIdConexionCreacion);
                this.columnUltimaModificacion = new DataColumn("UltimaModificacion", typeof(System.Byte[]), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUltimaModificacion);
                this.columnIdConexionUltimaModificacion = new DataColumn("IdConexionUltimaModificacion", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIdConexionUltimaModificacion);
                this.columnRowId = new DataColumn("RowId", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowId);
                this.Constraints.Add(new UniqueConstraint("tsa_FacturasImpagasDatasetKey1", new DataColumn[] {
                                this.columnIdCuenta,
                                this.columnIdComprobante}, true));
                this.columnIdCuenta.AllowDBNull = false;
                this.columnIdComprobante.AllowDBNull = false;
                this.columnIdConexionCreacion.AllowDBNull = false;
                this.columnUltimaModificacion.ReadOnly = true;
            }
            
            public tsa_FacturasImpagasRow Newtsa_FacturasImpagasRow() {
                return ((tsa_FacturasImpagasRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new tsa_FacturasImpagasRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(tsa_FacturasImpagasRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tsa_FacturasImpagasRowChanged != null)) {
                    this.tsa_FacturasImpagasRowChanged(this, new tsa_FacturasImpagasRowChangeEvent(((tsa_FacturasImpagasRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tsa_FacturasImpagasRowChanging != null)) {
                    this.tsa_FacturasImpagasRowChanging(this, new tsa_FacturasImpagasRowChangeEvent(((tsa_FacturasImpagasRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tsa_FacturasImpagasRowDeleted != null)) {
                    this.tsa_FacturasImpagasRowDeleted(this, new tsa_FacturasImpagasRowChangeEvent(((tsa_FacturasImpagasRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tsa_FacturasImpagasRowDeleting != null)) {
                    this.tsa_FacturasImpagasRowDeleting(this, new tsa_FacturasImpagasRowChangeEvent(((tsa_FacturasImpagasRow)(e.Row)), e.Action));
                }
            }
            
            public void Removetsa_FacturasImpagasRow(tsa_FacturasImpagasRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tsa_FacturasImpagasRow : DataRow {
            
            private tsa_FacturasImpagasDataTable tabletsa_FacturasImpagas;
            
            internal tsa_FacturasImpagasRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tabletsa_FacturasImpagas = ((tsa_FacturasImpagasDataTable)(this.Table));
            }
            
            public string IdCuenta {
                get {
                    return ((string)(this[this.tabletsa_FacturasImpagas.IdCuentaColumn]));
                }
                set {
                    this[this.tabletsa_FacturasImpagas.IdCuentaColumn] = value;
                }
            }
            
            public string Cuenta {
                get {
                    try {
                        return ((string)(this[this.tabletsa_FacturasImpagas.CuentaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tabletsa_FacturasImpagas.CuentaColumn] = value;
                }
            }
            
            public string IdComprobante {
                get {
                    return ((string)(this[this.tabletsa_FacturasImpagas.IdComprobanteColumn]));
                }
                set {
                    this[this.tabletsa_FacturasImpagas.IdComprobanteColumn] = value;
                }
            }
            
            public string Numero {
                get {
                    try {
                        return ((string)(this[this.tabletsa_FacturasImpagas.NumeroColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tabletsa_FacturasImpagas.NumeroColumn] = value;
                }
            }
            
            public string IdTipoDeComprobante {
                get {
                    try {
                        return ((string)(this[this.tabletsa_FacturasImpagas.IdTipoDeComprobanteColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tabletsa_FacturasImpagas.IdTipoDeComprobanteColumn] = value;
                }
            }
            
            public string TipoDeComprobante {
                get {
                    try {
                        return ((string)(this[this.tabletsa_FacturasImpagas.TipoDeComprobanteColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tabletsa_FacturasImpagas.TipoDeComprobanteColumn] = value;
                }
            }
            
            public System.DateTime FechaEmision {
                get {
                    try {
                        return ((System.DateTime)(this[this.tabletsa_FacturasImpagas.FechaEmisionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tabletsa_FacturasImpagas.FechaEmisionColumn] = value;
                }
            }
            
            public System.DateTime FechaVencimiento {
                get {
                    try {
                        return ((System.DateTime)(this[this.tabletsa_FacturasImpagas.FechaVencimientoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tabletsa_FacturasImpagas.FechaVencimientoColumn] = value;
                }
            }
            
            public string Vendedores {
                get {
                    try {
                        return ((string)(this[this.tabletsa_FacturasImpagas.VendedoresColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tabletsa_FacturasImpagas.VendedoresColumn] = value;
                }
            }
            
            public System.Decimal Total {
                get {
                    try {
                        return ((System.Decimal)(this[this.tabletsa_FacturasImpagas.TotalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tabletsa_FacturasImpagas.TotalColumn] = value;
                }
            }
            
            public System.Decimal SaldoFactura {
                get {
                    try {
                        return ((System.Decimal)(this[this.tabletsa_FacturasImpagas.SaldoFacturaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tabletsa_FacturasImpagas.SaldoFacturaColumn] = value;
                }
            }
            
            public string IdTiposComprobantesPredecesores {
                get {
                    try {
                        return ((string)(this[this.tabletsa_FacturasImpagas.IdTiposComprobantesPredecesoresColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tabletsa_FacturasImpagas.IdTiposComprobantesPredecesoresColumn] = value;
                }
            }
            
            public string IdOrdenReparaciones {
                get {
                    try {
                        return ((string)(this[this.tabletsa_FacturasImpagas.IdOrdenReparacionesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tabletsa_FacturasImpagas.IdOrdenReparacionesColumn] = value;
                }
            }
            
            public System.Decimal SaldoCtaCte {
                get {
                    try {
                        return ((System.Decimal)(this[this.tabletsa_FacturasImpagas.SaldoCtaCteColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tabletsa_FacturasImpagas.SaldoCtaCteColumn] = value;
                }
            }
            
            public System.Decimal SaldoCtaCteDV {
                get {
                    try {
                        return ((System.Decimal)(this[this.tabletsa_FacturasImpagas.SaldoCtaCteDVColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tabletsa_FacturasImpagas.SaldoCtaCteDVColumn] = value;
                }
            }
            
            public System.Decimal SaldoCtaCteConsolidado {
                get {
                    try {
                        return ((System.Decimal)(this[this.tabletsa_FacturasImpagas.SaldoCtaCteConsolidadoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tabletsa_FacturasImpagas.SaldoCtaCteConsolidadoColumn] = value;
                }
            }
            
            public System.DateTime FechaCreacion {
                get {
                    try {
                        return ((System.DateTime)(this[this.tabletsa_FacturasImpagas.FechaCreacionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tabletsa_FacturasImpagas.FechaCreacionColumn] = value;
                }
            }
            
            public long IdConexionCreacion {
                get {
                    return ((long)(this[this.tabletsa_FacturasImpagas.IdConexionCreacionColumn]));
                }
                set {
                    this[this.tabletsa_FacturasImpagas.IdConexionCreacionColumn] = value;
                }
            }
            
            public System.Byte[] UltimaModificacion {
                get {
                    try {
                        return ((System.Byte[])(this[this.tabletsa_FacturasImpagas.UltimaModificacionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tabletsa_FacturasImpagas.UltimaModificacionColumn] = value;
                }
            }
            
            public long IdConexionUltimaModificacion {
                get {
                    try {
                        return ((long)(this[this.tabletsa_FacturasImpagas.IdConexionUltimaModificacionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tabletsa_FacturasImpagas.IdConexionUltimaModificacionColumn] = value;
                }
            }
            
            public System.Guid RowId {
                get {
                    try {
                        return ((System.Guid)(this[this.tabletsa_FacturasImpagas.RowIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tabletsa_FacturasImpagas.RowIdColumn] = value;
                }
            }
            
            public bool IsCuentaNull() {
                return this.IsNull(this.tabletsa_FacturasImpagas.CuentaColumn);
            }
            
            public void SetCuentaNull() {
                this[this.tabletsa_FacturasImpagas.CuentaColumn] = System.Convert.DBNull;
            }
            
            public bool IsNumeroNull() {
                return this.IsNull(this.tabletsa_FacturasImpagas.NumeroColumn);
            }
            
            public void SetNumeroNull() {
                this[this.tabletsa_FacturasImpagas.NumeroColumn] = System.Convert.DBNull;
            }
            
            public bool IsIdTipoDeComprobanteNull() {
                return this.IsNull(this.tabletsa_FacturasImpagas.IdTipoDeComprobanteColumn);
            }
            
            public void SetIdTipoDeComprobanteNull() {
                this[this.tabletsa_FacturasImpagas.IdTipoDeComprobanteColumn] = System.Convert.DBNull;
            }
            
            public bool IsTipoDeComprobanteNull() {
                return this.IsNull(this.tabletsa_FacturasImpagas.TipoDeComprobanteColumn);
            }
            
            public void SetTipoDeComprobanteNull() {
                this[this.tabletsa_FacturasImpagas.TipoDeComprobanteColumn] = System.Convert.DBNull;
            }
            
            public bool IsFechaEmisionNull() {
                return this.IsNull(this.tabletsa_FacturasImpagas.FechaEmisionColumn);
            }
            
            public void SetFechaEmisionNull() {
                this[this.tabletsa_FacturasImpagas.FechaEmisionColumn] = System.Convert.DBNull;
            }
            
            public bool IsFechaVencimientoNull() {
                return this.IsNull(this.tabletsa_FacturasImpagas.FechaVencimientoColumn);
            }
            
            public void SetFechaVencimientoNull() {
                this[this.tabletsa_FacturasImpagas.FechaVencimientoColumn] = System.Convert.DBNull;
            }
            
            public bool IsVendedoresNull() {
                return this.IsNull(this.tabletsa_FacturasImpagas.VendedoresColumn);
            }
            
            public void SetVendedoresNull() {
                this[this.tabletsa_FacturasImpagas.VendedoresColumn] = System.Convert.DBNull;
            }
            
            public bool IsTotalNull() {
                return this.IsNull(this.tabletsa_FacturasImpagas.TotalColumn);
            }
            
            public void SetTotalNull() {
                this[this.tabletsa_FacturasImpagas.TotalColumn] = System.Convert.DBNull;
            }
            
            public bool IsSaldoFacturaNull() {
                return this.IsNull(this.tabletsa_FacturasImpagas.SaldoFacturaColumn);
            }
            
            public void SetSaldoFacturaNull() {
                this[this.tabletsa_FacturasImpagas.SaldoFacturaColumn] = System.Convert.DBNull;
            }
            
            public bool IsIdTiposComprobantesPredecesoresNull() {
                return this.IsNull(this.tabletsa_FacturasImpagas.IdTiposComprobantesPredecesoresColumn);
            }
            
            public void SetIdTiposComprobantesPredecesoresNull() {
                this[this.tabletsa_FacturasImpagas.IdTiposComprobantesPredecesoresColumn] = System.Convert.DBNull;
            }
            
            public bool IsIdOrdenReparacionesNull() {
                return this.IsNull(this.tabletsa_FacturasImpagas.IdOrdenReparacionesColumn);
            }
            
            public void SetIdOrdenReparacionesNull() {
                this[this.tabletsa_FacturasImpagas.IdOrdenReparacionesColumn] = System.Convert.DBNull;
            }
            
            public bool IsSaldoCtaCteNull() {
                return this.IsNull(this.tabletsa_FacturasImpagas.SaldoCtaCteColumn);
            }
            
            public void SetSaldoCtaCteNull() {
                this[this.tabletsa_FacturasImpagas.SaldoCtaCteColumn] = System.Convert.DBNull;
            }
            
            public bool IsSaldoCtaCteDVNull() {
                return this.IsNull(this.tabletsa_FacturasImpagas.SaldoCtaCteDVColumn);
            }
            
            public void SetSaldoCtaCteDVNull() {
                this[this.tabletsa_FacturasImpagas.SaldoCtaCteDVColumn] = System.Convert.DBNull;
            }
            
            public bool IsSaldoCtaCteConsolidadoNull() {
                return this.IsNull(this.tabletsa_FacturasImpagas.SaldoCtaCteConsolidadoColumn);
            }
            
            public void SetSaldoCtaCteConsolidadoNull() {
                this[this.tabletsa_FacturasImpagas.SaldoCtaCteConsolidadoColumn] = System.Convert.DBNull;
            }
            
            public bool IsFechaCreacionNull() {
                return this.IsNull(this.tabletsa_FacturasImpagas.FechaCreacionColumn);
            }
            
            public void SetFechaCreacionNull() {
                this[this.tabletsa_FacturasImpagas.FechaCreacionColumn] = System.Convert.DBNull;
            }
            
            public bool IsUltimaModificacionNull() {
                return this.IsNull(this.tabletsa_FacturasImpagas.UltimaModificacionColumn);
            }
            
            public void SetUltimaModificacionNull() {
                this[this.tabletsa_FacturasImpagas.UltimaModificacionColumn] = System.Convert.DBNull;
            }
            
            public bool IsIdConexionUltimaModificacionNull() {
                return this.IsNull(this.tabletsa_FacturasImpagas.IdConexionUltimaModificacionColumn);
            }
            
            public void SetIdConexionUltimaModificacionNull() {
                this[this.tabletsa_FacturasImpagas.IdConexionUltimaModificacionColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowIdNull() {
                return this.IsNull(this.tabletsa_FacturasImpagas.RowIdColumn);
            }
            
            public void SetRowIdNull() {
                this[this.tabletsa_FacturasImpagas.RowIdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tsa_FacturasImpagasRowChangeEvent : EventArgs {
            
            private tsa_FacturasImpagasRow eventRow;
            
            private DataRowAction eventAction;
            
            public tsa_FacturasImpagasRowChangeEvent(tsa_FacturasImpagasRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public tsa_FacturasImpagasRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
